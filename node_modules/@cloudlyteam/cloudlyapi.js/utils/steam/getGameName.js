const CloudlyError = require("../cloudlyError.js");
const request = require("node-superfetch");

module.exports = (name, callback) => {
    
    if(!name) return new CloudlyError("You must put a name to search.");
    if(!callback) return new CloudlyError("Callback must be a function.")

    if(typeof(name) !== "string") return callback("The name of the game must be a string", null);

    request.get(`https://store.steampowered.com/search/?term=${name.split(/ +/g).join("+")}`).then((results) => {
        
        if (!results.text.includes("<!-- List Items -->")) return callback("Game not found", null);

        const first = results.text.split("<!-- End Extra empty div -->")[1];
        const second = first.split("</a>")[0];
        const third = second.split('href="')[1];
        const fourth = third.split('"')[0];
        const fifth = fourth.split("app/")[1];
        const gameID = fifth.split("/")[0];

        request.get(`https://store.steampowered.com/api/appdetails?appids=${gameID}`).then((game) => {

            const gameData = JSON.parse(game.text.replace(/<br>/g, "\\n").replace(/<[^>]*>/g, ""));

            if(!gameData[gameID].success) return callback("Game not found.", null);

            const data = gameData[gameID].data;

            let platforms = [];
            let categories = [];
            let genres = [];
            let requirements = [];
            let screenshots = [];

            for(let i of data.categories){
                categories.push(i.description)
            }

            for(let i of data.genres){
                genres.push(i.description)
            }

            if(data.platforms.windows) platforms.push("WINDOWS")
            if(data.platforms.linux) platforms.push("LINUX")
            if(data.platforms.mac) platforms.push("MAC")

            if(data.pc_requirements.length != 0) requirements.push({ windows: data.pc_requirements })
            if(data.linux_requirements.length != 0) requirements.push({ linux: data.linux_requirements })
            if(data.mac_requirements.length != 0) requirements.push({ mac: data.mac_requirements })

            for(let i of data.screenshots){
                screenshots.push({ thumbnail: i.path_thumbnail, full: i.path_full })
            }

            const responseObject = {
                name: data.name,
                price: data.is_free ? null : {
                    currency: data.price_overview.currency,
                    discount: !data.price_overview.discount_percent ? null : { 
                        percent: `${data.price_overview.discount_percent}%`,
                        initial: data.price_overview.initial_formatted.slice(1)
                    },
                    final: data.price_overview.final_formatted.slice(1)
                },
                platforms: platforms,
                reviews: data.reviews ? data.reviews : null,
                languages: data.supported_languages,
                website: data.website,
                appid: data.steam_appid,
                required_age: data.required_age ? data.required_age : null,
                release_date: data.release_date.coming_soon ? null : data.release_date.date,
                background: data.background,
                categories: categories,
                genres: genres,
                large_description: data.detailed_description,
                short_description: data.short_description,
                icon: data.header_image,
                requirements: requirements,
                dlcs: data.dlc && !data.dlc.length ? data.dlc : null,
                developers: data.developers,
                publishers: data.publishers,
                copyright: data.legal_notice ? data.legal_notice : null,
                screenshots: screenshots,
                packages: !data.packages ? null : {
                    list: data.packages,
                    groups: data.package_groups
                },
                movies: data.movies ? data.movies : null,
                recommendations: data.recommendations ? data.recommendations.total : null,
                content_descriptors: data.content_descriptors.ids && !data.content_descriptors.ids.length ? null : data.content_descriptors,
                achievements: data.achievements ? data.achievements : null,
                metacritic: data.metacritic ? data.metacritic : null,
                support: data.support_info,
                controller_support: data.controller_support ? data.controller_support : null,
                type: data.type
            }

            callback(null, responseObject);

        });

    });

}