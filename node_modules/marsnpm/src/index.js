module.exports = {

    /**
     * Cry endpoint eso
     * @returns {Promise<String>}
     */

    cry: async function () {

        let link = await request('media/gifs/cry.json')
        return link;

    },

    /**
     * Angry endpoint
     * @returns {Promise<String>}
     */

    angry: async function () {

        let link = await request('media/gifs/angry.json')
        return link;

    },

    /**
     * Jump endpoint
     * @returns {Promise<String>}
     */

    jump: async function () {

        let link = await request('media/gifs/jump')
        return link;

    },

    /**
     * Like endpoint
     * @returns {Promise<String>}
     */

    like: async function () {

        let link = await request('media/gifs/like')
        return link;

    },

    /**
     * Kill endpoint
     * @returns {Promise<String>}
     */

    kill: async function () {

        let link = await request('media/gifs/kill.json')
        return link;

    },

    /**
     * Sword endpoint
     * @returns {Promise<String>}
     */

    sword: async function () {

        let link = await request('media/gifs/sword')
        return link;

    },

    /**
     * Suicide endpoint
     * @returns {Promise<String>}
     */

    suicide: async function () {

        let link = await request('media/gifs/suicide')
        return link;

    },

    /**
     * Sleep endpoint
     * @returns {Promise<String>}
     */

    sleep: async function () {

        let link = await request('media/gifs/sleep')
        return link;

    },

    /**
     * Meme endpoint
     * @returns {Promise<String>}
     */

    meme: async function () {

        let link = await request('media/imgs/meme')
        return link;

    },

    /**
     * Tortura endpoint
     * @returns {Promise<String>}
     */

    tortura: async function () {

        let link = await request('media/gifs/tortura')
        return link;

    },

    /**
     * Cmamo endpoint
     * @returns {Promise<String>}
     */

    c_mamo: async function () {

        let link = await request('media/imgs/cmamo')
        return link;

    },

    /**
     * Hug endpoint
     * @returns {Promise<String>}
     */

    hug: async function () {

        let link = await request('media/gifs/hug')
        return link;

    },

    /**
     * punch endpoint
     * @returns {Promise<String>}
     */

    punch: async function () {

        let link = await request('media/gifs/punch')
        return link;

    },
  
    /**
     * kawaii endpoint
     * @returns {Promise<String>}
     */

    kawaii: async function () {

        let link = await request('media/gifs/kawaii')
        return link;

    },

    /**
     * happy endpoint
     * @returns {Promise<String>}
     */

    happy: async function () {

        let link = await request('media/gifs/happy')
        return link;

    },

    /**
     * food endpoint
     * @returns {Promise<String>}
     */

    food: async function () {

        let link = await request('media/gifs/food')
        return link;

    },

    /**
     * fly epoint
     * @returns {Promise<String>}
     */

    fly: async function () {

        let link = await request('media/gifs/fly')
        return link;

    },

    /**
     * fbi endpoint
     * @returns {Promise<String>}
     */

    fbi: async function () {

        let link = await request('media/gifs/fbi')
        return link;

    },
    /**
     * facepalm endpoint
     * @returns {Promise<String>}
     */
    facepalm: async function () {

        let link = await request('media/gifs/facepalm')
        return link;

    },
    /**
     * drive endpoint
     * @returns {Promise<String>}
     */
    driev: async function () {

        let link = await request('media/gifs/drive')
        return link;

    },
    dance: async function () {

        let link = await request('media/gifs/dance')
        return link;

    },
    confused: async function () {

        let link = await request('media/gifs/confused')
        return link;

    },
    bored: async function () {

        let link = await request('media/gifs/bored')
        return link;

    },
    boom: async function () {

        let link = await request('media/gifs/boom')
        return link;

    },
    bite: async function () {

        let link = await request('media/gifs/bite')
        return link;

    },
    bath: async function () {

        let link = await request('media/gifs/bath')
        return link;

    },
    amor: async function () {

        let link = await request('media/gifs/amor')
        return link;

    },
    slap: async function () {

        let link = await request('media/gifs/slap')
        return link;

    },
    kiss: async function () {

        let link = await request('media/gifs/kiss')
        return link;

    },
    pat: async function () {

        let link = await request('media/gifs/flower')
        return link;

    },
    flower: async function () {

        let link = await request('media/gifs/flower')
        return link;

    },
    dab: async function () {

        let link = await request('media/gifs/dab')
        return link;

    },
    feed: async function () {

        let link = await request('media/gifs/feed')
        return link;

    },
    twerk: async function () {

        let link = await request('media/gifs/twerk')
        return link;

    },
    shoot: async function () {

        let link = await request('media/gifs/shoot')
        return link;

    },


    Eight_ball: async function () {

        let link = await request('text/fun/8ball')
        return link;

    },
    owo: async function () {

        let link = await request('text/fun/owo')
        return link;

    },
    kiss: async function () {

        let link = await request('media/gifs/kiss')
        return link;

    },
    pokemon: async function () {

        let link = await request('media/gifs/pokemon')
        return link;

    },
    fusion: async function () {

        let link = await request('media/gifs/fusion')
        return link;

    },
      dog: async function () {

        let link = await request('media/gifs/dog')
        return link;

    },
      cat: async function () {

        let link = await request('media/gifs/cat')
        return link;

    },
 
/*JIMP*/

    blur: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp', {
            avatar: avatar
        })
        return link;

    },


    pixel: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp2', {
            avatar: avatar
        })
        return link;

    },

    eso: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp4', {
            avatar: avatar
        })
        return link;

    },
      thisis: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp33', {
            avatar: avatar
        })
        return link;

    },


    rip: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp3', {
            avatar: avatar
        })
        return link;

    },
    gaussian: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp5', {
            avatar: avatar
        })
        return link;

    },
    invert: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp6', {
            avatar: avatar
        })
        return link;

    },
    fade: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp8', {
            avatar: avatar
        })
        return link;

    },
    color: async function (color) {

        if (!color || typeof color !== "string") throw new Error("Invalid color")
        let link = await request('jimp9', {
            color: color
        })
        return link;

    },
    sniper: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp10', {
            avatar: avatar
        })
        return link;

    },
    basura: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp11', {
            avatar: avatar
        })
        return link;

    },
    trump: async function (trump) {

        if (!trump || typeof trump !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp12', {
            trump: trump
        })
        return link;

    },
      boton: async function (texto1, texto2) {

        if (!texto1 || typeof texto1 !== "string") throw new Error("Invalid texto1")
        let link = await request('jimp30', {
            texto1: texto1,
            texto2: texto2
        })
        return link;

    },
       eyes: async function (texto1, texto2, texto3) {

        if (!texto1 || typeof texto1 !== "string") throw new Error("Invalid texto1")
        let link = await request('jimp36', {
            texto1: texto1,
            texto2: texto2,
            texto3: texto3
        })
        return link;

    },
      google: async function (google) {

        if (!google || typeof google !== "string") throw new Error("Invalid args url")
        let link = await request('jimp19', {
            google: google
        })
        return link;

    },
        loli: async function (text) {

        if (!text || typeof text !== "string") throw new Error("Invalid args url")
        let link = await request('jimp31', {
            text: text
        })
        return link;

    },
    mind: async function (mind) {

        if (!mind || typeof mind !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp15', {
            mind: mind
        })
        return link;

    },
    login: async function (login) {

        if (!login || typeof login !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp13', {
            login: login
        })
        return link;

    },
    susto: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp14', {
            avatar: avatar
        })
        return link;

    },
      bravery: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp22', {
            avatar: avatar
        })
        return link;

    },
        balance: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp23', {
            avatar: avatar
        })
        return link;
        },
                  mascara: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('mascara', {
            avatar: avatar
        })
        return link;

    },
        brilliance: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp24', {
            avatar: avatar
        })
        return link;

    },
          hackweek: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp25', {
            avatar: avatar
        })
        return link;

    },
            rainbow: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp27', {
            avatar: avatar
        })
        return link;

    },
              wanted: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp28', {
            avatar: avatar
        })
        return link;

    },
                wasted: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp29', {
            avatar: avatar
        })
        return link;

    },
                  checkout: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp35', {
            avatar: avatar
        })
        return link;

    },
      licencia: async function (avatar, usertext) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp26', {
            avatar: avatar,
            usertext: usertext
        })
        return link;

    },
    bienvenida: async function (avatar, usertext) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp16', {
            avatar: avatar,
            usertext: usertext
        })
        return link;

    },
    sedijo: async function (sedijo) {

        if (!sedijo || typeof sedijo !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp17', {
            sedijo: sedijo
        })
        return link;

    },
      bob: async function (avatar, avatar2) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp18', {
            avatar: avatar,
            avatar2: avatar2
        })
        return link;

    },
        ship: async function (avatar, avatar2) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp32', {
            avatar: avatar,
            avatar2: avatar2
        })
        return link;

    },
  
        coche: async function (avatar, avatar2) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp20', {
            avatar: avatar,
            avatar2: avatar2
        })
        return link;

    },

          bienvenida2: async function (avatar, usertext, descripcion, fondo) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('jimp21', {
            avatar: avatar,
            usertext: usertext,
            descripcion: descripcion,
            fondo: fondo
        })
        return link;
            
    },
  

    grey: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
        let link = await request('jimp7', {
            avatar: avatar
        })
        return link;

    },
          navidad: async function (avatar) {

        if (!avatar || typeof avatar !== "string") throw new Error("Invalid avatar url")
      
        let link = await request('navidad', {
            avatar: avatar
        })
        return link;

    },
  genHex: async function genHex() {
    let chars = 'abcdef0123456789';
    let generatedHex = '';
    for (var i = 0; i < 6; i++) {
        generatedHex += chars.charAt(Math.floor(Math.random() * chars.length))
    }
    return 'https://api.alexflipnote.dev/color/image/'+generatedHex
    
}
}


async function request(endpoint, params = false) {

    const { get } = require('node-superfetch')
    let body;
    if (params) body = await get(`https://marsapi.glitch.me/${endpoint}`).query(params).then(i => i.body);
    else body = await get(`https://marsapi.glitch.me/${endpoint}`).then(i => i.body);

    if (body.error) throw new Error(body.message)

    if (body.url) return body.url

    return Buffer.from(body)

}